use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::costing::{FIXED_LOW_FEE, FIXED_MEDIUM_FEE};
use crate::types::*;
use native_sdk::resource::{ResourceManager, Vault};
use radix_engine_interface::api::component::{
    ComponentRoyaltyAccumulatorSubstate, ComponentRoyaltyConfigSubstate,
};
use radix_engine_interface::api::node_modules::royalty::*;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::{AccessRule, FnKey};
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};

pub struct RoyaltyNativePackage;
impl RoyaltyNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut substates = Vec::new();
        substates
            .push(aggregator.add_child_type_and_descendents::<ComponentRoyaltyConfigSubstate>());
        substates.push(
            aggregator.add_child_type_and_descendents::<ComponentRoyaltyAccumulatorSubstate>(),
        );

        let mut functions = BTreeMap::new();
        functions.insert(
            COMPONENT_ROYALTY_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<ComponentRoyaltyCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<ComponentRoyaltyCreateOutput>(),
                export_name: COMPONENT_ROYALTY_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<ComponentSetRoyaltyConfigInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<ComponentSetRoyaltyConfigOutput>(),
                export_name: COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT.to_string(),
            },
        );
        functions.insert(
            COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator.add_child_type_and_descendents::<ComponentClaimRoyaltyInput>(),
                output: aggregator.add_child_type_and_descendents::<ComponentClaimRoyaltyOutput>(),
                export_name: COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT.to_string(),
            },
        );

        let schema = generate_full_schema(aggregator);
        let component_royalty_schema = BlueprintSchema {
            parent: None,
            schema,
            substates,
            functions,
            virtual_lazy_load_functions: btreemap!(),
            event_schema: [].into(),
        };

        PackageSchema {
            blueprints: btreemap!(
                COMPONENT_ROYALTY_BLUEPRINT.to_string() => component_royalty_schema,
            ),
        }
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                COMPONENT_ROYALTY_BLUEPRINT.to_string(),
                COMPONENT_ROYALTY_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            COMPONENT_ROYALTY_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                ComponentRoyaltyBlueprint::create(input, api)
            }
            COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                ComponentRoyaltyBlueprint::set_royalty_config(receiver, input, api)
            }
            COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                ComponentRoyaltyBlueprint::claim_royalty(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }
}

pub struct ComponentRoyaltyBlueprint;

impl ComponentRoyaltyBlueprint {
    pub(crate) fn create<Y>(
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: ComponentRoyaltyCreateInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        // Create a royalty vault
        let config_substate = ComponentRoyaltyConfigSubstate {
            royalty_config: input.royalty_config,
        };
        let accumulator_substate = ComponentRoyaltyAccumulatorSubstate {
            royalty_vault: None,
        };
        let component_id = api.new_object(
            COMPONENT_ROYALTY_BLUEPRINT,
            vec![
                scrypto_encode(&config_substate).unwrap(),
                scrypto_encode(&accumulator_substate).unwrap(),
            ],
        )?;

        Ok(IndexedScryptoValue::from_typed(&Own(component_id)))
    }

    pub(crate) fn set_royalty_config<Y>(
        receiver: &NodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: ComponentSetRoyaltyConfigInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            &RoyaltyOffset::RoyaltyConfig.into(),
            LockFlags::MUTABLE,
        )?;

        let mut substate: ComponentRoyaltyConfigSubstate =
            api.kernel_read_substate(handle)?.as_typed().unwrap();
        substate.royalty_config = input.royalty_config;
        api.kernel_write_substate(handle, IndexedScryptoValue::from_typed(&substate))?;

        api.sys_drop_lock(handle)?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn claim_royalty<Y>(
        receiver: &NodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let _input: ComponentClaimRoyaltyInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            &RoyaltyOffset::RoyaltyAccumulator.into(),
            LockFlags::read_only(),
        )?;

        let substate: ComponentRoyaltyAccumulatorSubstate =
            api.kernel_read_substate(handle)?.as_typed().unwrap();
        let royalty_vault = substate.royalty_vault.clone();
        let bucket = match royalty_vault {
            Some(vault) => Vault(vault).sys_take_all(api)?,
            None => ResourceManager(RADIX_TOKEN).new_empty_bucket(api)?,
        };
        api.sys_drop_lock(handle)?;

        Ok(IndexedScryptoValue::from_typed(&bucket))
    }
}
