use crate::kernel::kernel_api::{KernelModuleApi, KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::auth::{convert_contextless, MethodAuthorization};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::METADATA_GET_IDENT;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};
use radix_engine_interface::types::*;

use super::{SetMutabilityEvent, SetRuleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub access_rules: AccessRulesConfig,
    pub child_blueprint_rules: BTreeMap<String, AccessRulesConfig>,
}

impl MethodAccessRulesSubstate {
    pub fn method_mutability_authorization(
        &self,
        object_key: &ObjectKey,
        key: &MethodKey,
    ) -> MethodAuthorization {
        let method_auth = match object_key {
            ObjectKey::SELF => self.access_rules.get_mutability(key),
            ObjectKey::ChildBlueprint(blueprint_name) => {
                if let Some(config) = self.child_blueprint_rules.get(blueprint_name) {
                    config.get_mutability(key)
                } else {
                    AccessRule::DenyAll
                }
            }
        };

        // TODO: Remove
        convert_contextless(&method_auth)
    }

    pub fn group_mutability_authorization(
        &self,
        object_key: &ObjectKey,
        name: &str,
    ) -> MethodAuthorization {
        let group_auth = match object_key {
            ObjectKey::SELF => self.access_rules.get_group_mutability(name),
            ObjectKey::ChildBlueprint(blueprint_name) => {
                if let Some(config) = self.child_blueprint_rules.get(blueprint_name) {
                    config.get_group_mutability(name)
                } else {
                    AccessRule::DenyAll
                }
            }
        };

        // TODO: Remove
        convert_contextless(&group_auth)
    }
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut substates = Vec::new();
        substates.push(aggregator.add_child_type_and_descendents::<MethodAccessRulesSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export_name: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleOutput>(),
                export_name: ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [
                SetRuleEvent,
                SetMutabilityEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                ACCESS_RULES_BLUEPRINT.to_string() => BlueprintSchema {
                    parent: None,
                    schema,
                    substates,
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema
                }
            ),
        }
    }

    pub fn authorization<Y: KernelModuleApi<RuntimeError>>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError> {
        let authorization = match ident {
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                let input: AccessRulesSetMethodAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                Self::method_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.method_key,
                    api,
                )?
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                let input: AccessRulesSetMethodAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                Self::method_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.method_key,
                    api,
                )?
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                let input: AccessRulesSetMethodMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;
                Self::method_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.method_key,
                    api,
                )?
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                let input: AccessRulesSetGroupAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                Self::group_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.name.as_str(),
                    api,
                )?
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                let input: AccessRulesSetGroupAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;
                Self::group_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.name.as_str(),
                    api,
                )?
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                let input: AccessRulesSetGroupMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;
                Self::group_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.name.as_str(),
                    api,
                )?
            }
            _ => MethodAuthorization::AllowAll,
        };

        Ok(authorization)
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                let rtn = Self::create(input.access_rules, input.child_blueprint_rules, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetMethodAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;
                let rtn = Self::set_method_access_rule_and_mutability(
                    receiver,
                    input.object_key,
                    input.method_key,
                    input.rule,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetMethodAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                let rtn = Self::set_method_access_rule(
                    receiver,
                    input.object_key,
                    input.method_key,
                    input.rule,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetMethodMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                let rtn = Self::set_method_mutability(
                    receiver,
                    input.object_key,
                    input.method_key,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetGroupAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;
                let rtn = Self::set_group_access_rule_and_mutability(
                    receiver,
                    input.object_key,
                    input.name,
                    input.rule,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetGroupAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                let rtn = Self::set_group_access_rule(
                    receiver,
                    input.object_key,
                    input.name,
                    input.rule,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetGroupMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                let rtn = Self::set_group_mutability(
                    receiver,
                    input.object_key,
                    input.name,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn group_mutability_authorization<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        name: &str,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            TypedModuleId::AccessRules,
            &AccessRulesOffset::AccessRules.into(),
            LockFlags::read_only(),
        )?;

        let authorization = {
            let access_rules_substate: MethodAccessRulesSubstate =
                api.kernel_read_substate(handle)?.as_typed().unwrap();
            access_rules_substate.group_mutability_authorization(&object_key, name)
        };

        api.kernel_drop_lock(handle)?;

        Ok(authorization)
    }

    pub fn method_mutability_authorization<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        method_key: MethodKey,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let authorization = if method_key.module_id.eq(&TypedModuleId::AccessRules) {
            // Should we just store this on ledger?
            MethodAuthorization::DenyAll
        } else {
            let handle = api.kernel_lock_substate(
                receiver,
                TypedModuleId::AccessRules,
                &AccessRulesOffset::AccessRules.into(),
                LockFlags::read_only(),
            )?;

            let authorization = {
                let access_rules_substate: MethodAccessRulesSubstate =
                    api.kernel_read_substate(handle)?.as_typed().unwrap();
                access_rules_substate.method_mutability_authorization(&object_key, &method_key)
            };

            api.kernel_drop_lock(handle)?;

            authorization
        };

        Ok(authorization)
    }

    pub(crate) fn create<Y>(
        mut access_rules: AccessRulesConfig,
        child_blueprint_rules: BTreeMap<String, AccessRulesConfig>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        // Set default access rules for Metadata Get
        access_rules.set_method_access_rule_and_mutability(
            MethodKey::new(TypedModuleId::Metadata, METADATA_GET_IDENT),
            AccessRule::AllowAll,
            AccessRule::DenyAll,
        );

        let substate = MethodAccessRulesSubstate {
            access_rules,
            child_blueprint_rules,
        };

        let component_id = api.new_object(
            ACCESS_RULES_BLUEPRINT,
            vec![scrypto_encode(&substate).unwrap()],
        )?;

        Ok(Own(component_id))
    }

    pub(crate) fn set_method_access_rule<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        method_key: MethodKey,
        rule: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_method_access_rule_and_mutability_internal(
            receiver,
            object_key,
            method_key,
            Some(rule),
            None,
            api,
        )
    }

    pub(crate) fn set_method_mutability<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        method_key: MethodKey,
        mutability: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_method_access_rule_and_mutability_internal(
            receiver,
            object_key,
            method_key,
            None,
            Some(mutability),
            api,
        )
    }

    pub fn set_method_access_rule_and_mutability<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        method_key: MethodKey,
        rule: AccessRuleEntry,
        mutability: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_method_access_rule_and_mutability_internal(
            receiver,
            object_key,
            method_key,
            Some(rule),
            Some(mutability),
            api,
        )
    }

    pub fn set_method_access_rule_and_mutability_internal<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        method_key: MethodKey,
        rule: Option<AccessRuleEntry>,
        mutability: Option<AccessRuleEntry>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let handle = api.sys_lock_substate(
            receiver,
            &AccessRulesOffset::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.sys_read_substate_typed(handle)?;
        let access_rules = match object_key {
            ObjectKey::SELF => &mut access_rules_substate.access_rules,
            ObjectKey::ChildBlueprint(blueprint_name) => access_rules_substate
                .child_blueprint_rules
                .get_mut(&blueprint_name)
                .unwrap(),
        };

        if let Some(rule) = &rule {
            access_rules.set_method_access_rule(method_key.clone(), rule.clone());
        }
        if let Some(mutability) = &mutability {
            access_rules.set_mutability(method_key.clone(), mutability.clone());
        }

        api.sys_write_substate_typed(handle, &access_rules_substate)?;

        if let Some(rule) = rule {
            Runtime::emit_event(
                api,
                SetRuleEvent::Method {
                    key: method_key.clone(),
                    rule: rule.into(),
                },
            )?;
        }

        if let Some(mutability) = mutability {
            Runtime::emit_event(
                api,
                SetMutabilityEvent::Method {
                    key: method_key,
                    mutability: mutability,
                },
            )?;
        }

        Ok(())
    }

    pub(crate) fn set_group_access_rule<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        name: String,
        rule: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_group_access_rule_and_mutability_internal(
            receiver,
            object_key,
            name,
            Some(rule),
            None,
            api,
        )
    }

    pub(crate) fn set_group_mutability<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        name: String,
        mutability: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_group_access_rule_and_mutability_internal(
            receiver,
            object_key,
            name,
            None,
            Some(mutability),
            api,
        )
    }

    pub(crate) fn set_group_access_rule_and_mutability<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        name: String,
        rule: AccessRule,
        mutability: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_group_access_rule_and_mutability_internal(
            receiver,
            object_key,
            name,
            Some(rule),
            Some(mutability),
            api,
        )
    }

    fn set_group_access_rule_and_mutability_internal<Y>(
        receiver: &NodeId,
        object_key: ObjectKey,
        name: String,
        rule: Option<AccessRule>,
        mutability: Option<AccessRule>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let handle = api.sys_lock_substate(
            receiver,
            &AccessRulesOffset::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.sys_read_substate_typed(handle)?;
        let access_rules = match object_key {
            ObjectKey::SELF => &mut access_rules_substate.access_rules,
            ObjectKey::ChildBlueprint(blueprint_name) => access_rules_substate
                .child_blueprint_rules
                .get_mut(&blueprint_name)
                .unwrap(),
        };
        if let Some(rule) = &rule {
            access_rules.set_group_access_rule(name.clone(), rule.clone());
        }
        if let Some(mutability) = &mutability {
            access_rules.set_group_mutability(name.clone(), mutability.clone());
        }
        api.sys_write_substate_typed(handle, &access_rules_substate)?;

        if let Some(rule) = rule {
            Runtime::emit_event(
                api,
                SetRuleEvent::Group {
                    name: name.clone(),
                    rule,
                },
            )?;
        }
        if let Some(mutability) = mutability {
            Runtime::emit_event(
                api,
                SetMutabilityEvent::Group {
                    name: name.clone(),
                    mutability,
                },
            )?;
        }

        Ok(())
    }
}
