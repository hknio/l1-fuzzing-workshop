use crate::data::manifest::ManifestCustomValueKind;
use crate::data::scrypto::model::*;
use crate::data::scrypto::*;
use crate::types::SubstateKey;
use crate::*;
use sbor::rust::prelude::*;
use sbor::*;
use utils::copy_u8_array;

pub const NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH: usize = 64;

/// Marks the rust type that represents a non-fungible id, of any kind (i.e. String, Integer, Bytes and UUID).
pub trait IsNonFungibleLocalId: Into<NonFungibleLocalId> {
    fn id_type() -> NonFungibleIdType;
}

impl IsNonFungibleLocalId for StringNonFungibleLocalId {
    fn id_type() -> NonFungibleIdType {
        NonFungibleIdType::String
    }
}
impl IsNonFungibleLocalId for IntegerNonFungibleLocalId {
    fn id_type() -> NonFungibleIdType {
        NonFungibleIdType::Integer
    }
}
impl IsNonFungibleLocalId for BytesNonFungibleLocalId {
    fn id_type() -> NonFungibleIdType {
        NonFungibleIdType::Bytes
    }
}
impl IsNonFungibleLocalId for UUIDNonFungibleLocalId {
    fn id_type() -> NonFungibleIdType {
        NonFungibleIdType::UUID
    }
}

/// Marks the rust type that represents a non-fungible id, of non-auto-generated kind (i.e. String, Integer and Bytes).
pub trait IsNonAutoGeneratedNonFungibleLocalId: IsNonFungibleLocalId {}

impl IsNonAutoGeneratedNonFungibleLocalId for StringNonFungibleLocalId {}
impl IsNonAutoGeneratedNonFungibleLocalId for IntegerNonFungibleLocalId {}
impl IsNonAutoGeneratedNonFungibleLocalId for BytesNonFungibleLocalId {}

impl TryFrom<String> for NonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        Ok(StringNonFungibleLocalId::new(value)?.into())
    }
}

impl From<u64> for NonFungibleLocalId {
    fn from(value: u64) -> Self {
        IntegerNonFungibleLocalId::new(value).into()
    }
}

impl TryFrom<Vec<u8>> for NonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: Vec<u8>) -> Result<Self, Self::Error> {
        Ok(BytesNonFungibleLocalId::new(value)?.into())
    }
}

impl TryFrom<u128> for NonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: u128) -> Result<Self, Self::Error> {
        Ok(UUIDNonFungibleLocalId::new(value)?.into())
    }
}

/// Represents the local id of a non-fungible.
#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum NonFungibleLocalId {
    /// String matching `[_0-9a-zA-Z]{1,64}`.
    ///
    /// Create using `NonFungibleLocalId::string(...).unwrap()`.
    String(StringNonFungibleLocalId),
    /// Unsigned integers, up to u64.
    ///
    /// Create using `NonFungibleLocalId::integer(...)`.
    Integer(IntegerNonFungibleLocalId),
    /// Bytes, of length between 1 and 64.
    ///
    /// Create using `NonFungibleLocalId::bytes(...).unwrap()`.
    Bytes(BytesNonFungibleLocalId),
    /// UUID, v4, variant 1, big endian. See https://www.rfc-editor.org/rfc/rfc4122
    ///
    /// Create using `NonFungibleLocalId::uuid(...).unwrap()`.
    UUID(UUIDNonFungibleLocalId),
}

impl NonFungibleLocalId {
    pub fn string<T: Into<String>>(value: T) -> Result<Self, ContentValidationError> {
        value.into().try_into()
    }

    pub fn integer(value: u64) -> Self {
        value.into()
    }

    pub fn bytes<T: Into<Vec<u8>>>(value: T) -> Result<Self, ContentValidationError> {
        value.into().try_into()
    }

    pub fn uuid(value: u128) -> Result<Self, ContentValidationError> {
        value.try_into()
    }

    pub fn to_substate_key(&self) -> SubstateKey {
        SubstateKey::from_vec(scrypto_encode(self).expect("Failed to encode non-fungible local id"))
            .expect("Failed to convert non-fungible local id to SubstateKey")
    }
}

impl From<StringNonFungibleLocalId> for NonFungibleLocalId {
    fn from(value: StringNonFungibleLocalId) -> Self {
        Self::String(value)
    }
}

impl From<IntegerNonFungibleLocalId> for NonFungibleLocalId {
    fn from(value: IntegerNonFungibleLocalId) -> Self {
        Self::Integer(value)
    }
}

impl From<BytesNonFungibleLocalId> for NonFungibleLocalId {
    fn from(value: BytesNonFungibleLocalId) -> Self {
        Self::Bytes(value)
    }
}

impl From<UUIDNonFungibleLocalId> for NonFungibleLocalId {
    fn from(value: UUIDNonFungibleLocalId) -> Self {
        Self::UUID(value)
    }
}

/// A string matching `[_0-9a-zA-Z]{1,64}`.
#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct StringNonFungibleLocalId(String);

impl StringNonFungibleLocalId {
    pub fn new(id: String) -> Result<Self, ContentValidationError> {
        let new = Self(id);
        new.validate()?;
        Ok(new)
    }

    pub fn validate(&self) -> Result<(), ContentValidationError> {
        if self.0.len() == 0 {
            return Err(ContentValidationError::Empty);
        }
        if self.0.len() > NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH {
            return Err(ContentValidationError::TooLong);
        }
        for char in self.0.chars() {
            if !matches!(char, '0'..='9' | 'A'..='Z' | 'a'..='z' | '_') {
                return Err(ContentValidationError::ContainsBadCharacter(char));
            }
        }
        Ok(())
    }

    pub fn value(&self) -> &str {
        &self.0
    }
}

impl TryFrom<String> for StringNonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        Self::new(value)
    }
}

impl TryFrom<&str> for StringNonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        Self::new(value.into())
    }
}

/// Unsigned integers, up to u64.
#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct IntegerNonFungibleLocalId(u64);

impl IntegerNonFungibleLocalId {
    pub fn new(id: u64) -> Self {
        Self(id)
    }

    pub fn value(&self) -> u64 {
        self.0
    }
}

impl From<u64> for IntegerNonFungibleLocalId {
    fn from(value: u64) -> Self {
        IntegerNonFungibleLocalId::new(value)
    }
}

/// Bytes, of length between 1 and 64.
#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct BytesNonFungibleLocalId(Vec<u8>);

impl BytesNonFungibleLocalId {
    pub fn new(id: Vec<u8>) -> Result<Self, ContentValidationError> {
        let new = Self(id);
        new.validate()?;
        Ok(new)
    }

    pub fn validate(&self) -> Result<(), ContentValidationError> {
        if self.0.len() == 0 {
            return Err(ContentValidationError::Empty);
        }
        if self.0.len() > NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH {
            return Err(ContentValidationError::TooLong);
        }
        Ok(())
    }

    pub fn value(&self) -> &[u8] {
        &self.0
    }
}

impl TryFrom<Vec<u8>> for BytesNonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: Vec<u8>) -> Result<Self, Self::Error> {
        Self::new(value)
    }
}

/// UUID, v4, variant 1, big endian. See https://www.rfc-editor.org/rfc/rfc4122
#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct UUIDNonFungibleLocalId(u128);

impl UUIDNonFungibleLocalId {
    pub fn new(id: u128) -> Result<Self, ContentValidationError> {
        let new = Self(id);
        new.validate()?;
        Ok(new)
    }

    pub fn validate(&self) -> Result<(), ContentValidationError> {
        // 0100 - v4
        // 10 - variant 1
        if (self.0 & 0x00000000_0000_f000_c000_000000000000u128)
            != 0x00000000_0000_4000_8000_000000000000u128
        {
            return Err(ContentValidationError::NotUuidV4Variant1);
        }

        Ok(())
    }

    pub fn value(&self) -> u128 {
        self.0
    }
}

impl TryFrom<u128> for UUIDNonFungibleLocalId {
    type Error = ContentValidationError;

    fn try_from(value: u128) -> Result<Self, Self::Error> {
        Self::new(value)
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum ContentValidationError {
    TooLong,
    Empty,
    ContainsBadCharacter(char),
    NotUuidV4Variant1,
}

impl NonFungibleLocalId {
    pub fn id_type(&self) -> NonFungibleIdType {
        match self {
            NonFungibleLocalId::String(..) => NonFungibleIdType::String,
            NonFungibleLocalId::Integer(..) => NonFungibleIdType::Integer,
            NonFungibleLocalId::Bytes(..) => NonFungibleIdType::Bytes,
            NonFungibleLocalId::UUID(..) => NonFungibleIdType::UUID,
        }
    }

    pub fn encode_body_common<X: CustomValueKind, E: Encoder<X>>(
        &self,
        encoder: &mut E,
    ) -> Result<(), EncodeError> {
        match self {
            NonFungibleLocalId::String(v) => {
                encoder.write_discriminator(0)?;
                encoder.write_size(v.0.len())?;
                encoder.write_slice(v.0.as_bytes())?;
            }
            NonFungibleLocalId::Integer(v) => {
                encoder.write_discriminator(1)?;
                encoder.write_slice(&v.0.to_be_bytes())?; // TODO: variable length encoding?
            }
            NonFungibleLocalId::Bytes(v) => {
                encoder.write_discriminator(2)?;
                encoder.write_size(v.0.len())?;
                encoder.write_slice(v.0.as_slice())?;
            }
            NonFungibleLocalId::UUID(v) => {
                encoder.write_discriminator(3)?;
                encoder.write_slice(&v.0.to_be_bytes())?;
            }
        }
        Ok(())
    }

    pub fn to_vec(&self) -> Vec<u8> {
        let mut buffer = Vec::new();
        let mut encoder = ScryptoEncoder::new(&mut buffer, 1);
        self.encode_body_common(&mut encoder).unwrap();
        buffer
    }

    pub fn decode_body_common<X: CustomValueKind, D: Decoder<X>>(
        decoder: &mut D,
    ) -> Result<Self, DecodeError> {
        match decoder.read_discriminator()? {
            0 => {
                let size = decoder.read_size()?;
                Self::string(
                    String::from_utf8(decoder.read_slice(size)?.to_vec())
                        .map_err(|_| DecodeError::InvalidCustomValue)?,
                )
                .map_err(|_| DecodeError::InvalidCustomValue)
            }
            1 => Ok(Self::integer(u64::from_be_bytes(copy_u8_array(
                decoder.read_slice(8)?,
            )))),
            2 => {
                let size = decoder.read_size()?;
                Self::bytes(decoder.read_slice(size)?.to_vec())
                    .map_err(|_| DecodeError::InvalidCustomValue)
            }
            3 => Self::uuid(u128::from_be_bytes(copy_u8_array(decoder.read_slice(16)?)))
                .map_err(|_| DecodeError::InvalidCustomValue),
            _ => Err(DecodeError::InvalidCustomValue),
        }
    }
}

//========
// error
//========

/// Represents an error when decoding non-fungible id.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum ParseNonFungibleLocalIdError {
    UnknownType,
    InvalidInteger,
    InvalidBytes,
    InvalidUUID,
    ContentValidationError(ContentValidationError),
}

#[cfg(not(feature = "alloc"))]
impl std::error::Error for ParseNonFungibleLocalIdError {}

#[cfg(not(feature = "alloc"))]
impl fmt::Display for ParseNonFungibleLocalIdError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

//========
// binary
//========

impl Categorize<ScryptoCustomValueKind> for NonFungibleLocalId {
    #[inline]
    fn value_kind() -> ValueKind<ScryptoCustomValueKind> {
        ValueKind::Custom(ScryptoCustomValueKind::NonFungibleLocalId)
    }
}

impl<E: Encoder<ScryptoCustomValueKind>> Encode<ScryptoCustomValueKind, E> for NonFungibleLocalId {
    #[inline]
    fn encode_value_kind(&self, encoder: &mut E) -> Result<(), EncodeError> {
        encoder.write_value_kind(Self::value_kind())
    }

    #[inline]
    fn encode_body(&self, encoder: &mut E) -> Result<(), EncodeError> {
        self.encode_body_common(encoder)
    }
}

impl<D: Decoder<ScryptoCustomValueKind>> Decode<ScryptoCustomValueKind, D> for NonFungibleLocalId {
    fn decode_body_with_value_kind(
        decoder: &mut D,
        value_kind: ValueKind<ScryptoCustomValueKind>,
    ) -> Result<Self, DecodeError> {
        decoder.check_preloaded_value_kind(value_kind, Self::value_kind())?;
        Self::decode_body_common(decoder)
    }
}

//====================
// binary (manifest)
//====================

impl Categorize<ManifestCustomValueKind> for NonFungibleLocalId {
    #[inline]
    fn value_kind() -> ValueKind<ManifestCustomValueKind> {
        ValueKind::Custom(ManifestCustomValueKind::NonFungibleLocalId)
    }
}

impl<E: Encoder<ManifestCustomValueKind>> Encode<ManifestCustomValueKind, E>
    for NonFungibleLocalId
{
    #[inline]
    fn encode_value_kind(&self, encoder: &mut E) -> Result<(), EncodeError> {
        encoder.write_value_kind(Self::value_kind())
    }

    #[inline]
    fn encode_body(&self, encoder: &mut E) -> Result<(), EncodeError> {
        self.encode_body_common(encoder)
    }
}

impl<D: Decoder<ManifestCustomValueKind>> Decode<ManifestCustomValueKind, D>
    for NonFungibleLocalId
{
    fn decode_body_with_value_kind(
        decoder: &mut D,
        value_kind: ValueKind<ManifestCustomValueKind>,
    ) -> Result<Self, DecodeError> {
        decoder.check_preloaded_value_kind(value_kind, Self::value_kind())?;
        Self::decode_body_common(decoder)
    }
}

impl Describe<ScryptoCustomTypeKind> for NonFungibleLocalId {
    const TYPE_ID: GlobalTypeId =
        GlobalTypeId::well_known(well_known_scrypto_custom_types::NON_FUNGIBLE_LOCAL_ID_ID);
}

//======
// text
//======

/// We wish to be stricter than `from_str_radix` in order to ensure a canonical format, and in particular:
/// * Not allow + at the start
/// * Not allow leading 0s
/// * Not allow an empty string
fn is_canonically_formatted_integer(digits: &str) -> bool {
    if digits == "0" {
        return true;
    }
    let mut chars = digits.chars();
    // A non-zero integer must start with a digit between 1 and 9
    let first_char = chars.next();
    match first_char {
        None => {
            return false;
        }
        Some('1'..='9') => {}
        _ => {
            return false;
        }
    }
    // The remaining chars must be digits
    for char in chars {
        if !matches!(char, '0'..='9') {
            return false;
        }
    }
    return true;
}

impl FromStr for NonFungibleLocalId {
    type Err = ParseNonFungibleLocalIdError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let local_id = if s.starts_with("<") && s.ends_with(">") {
            Self::string(s[1..s.len() - 1].to_string())
                .map_err(ParseNonFungibleLocalIdError::ContentValidationError)?
        } else if s.starts_with("#") && s.ends_with("#") {
            let digits = &s[1..s.len() - 1];
            if !is_canonically_formatted_integer(digits) {
                return Err(ParseNonFungibleLocalIdError::InvalidInteger);
            }
            NonFungibleLocalId::integer(
                u64::from_str_radix(&s[1..s.len() - 1], 10)
                    .map_err(|_| ParseNonFungibleLocalIdError::InvalidInteger)?,
            )
        } else if s.starts_with("[") && s.ends_with("]") {
            NonFungibleLocalId::bytes(
                hex::decode(&s[1..s.len() - 1])
                    .map_err(|_| ParseNonFungibleLocalIdError::InvalidBytes)?,
            )
            .map_err(ParseNonFungibleLocalIdError::ContentValidationError)?
        } else if s.starts_with("{") && s.ends_with("}") {
            let chars: Vec<char> = s[1..s.len() - 1].chars().collect();
            if chars.len() == 32 + 4
                && chars[8] == '-'
                && chars[13] == '-'
                && chars[18] == '-'
                && chars[23] == '-'
            {
                let hyphen_stripped: String = chars.into_iter().filter(|c| *c != '-').collect();
                if hyphen_stripped.len() == 32 {
                    NonFungibleLocalId::uuid(
                        u128::from_str_radix(&hyphen_stripped, 16)
                            .map_err(|_| ParseNonFungibleLocalIdError::InvalidUUID)?,
                    )
                    .map_err(ParseNonFungibleLocalIdError::ContentValidationError)?
                } else {
                    return Err(ParseNonFungibleLocalIdError::InvalidUUID);
                }
            } else {
                return Err(ParseNonFungibleLocalIdError::InvalidUUID);
            }
        } else {
            return Err(ParseNonFungibleLocalIdError::UnknownType);
        };

        Ok(local_id)
    }
}

impl fmt::Display for NonFungibleLocalId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            NonFungibleLocalId::String(StringNonFungibleLocalId(v)) => write!(f, "<{}>", v),
            NonFungibleLocalId::Integer(IntegerNonFungibleLocalId(v)) => write!(f, "#{}#", v),
            NonFungibleLocalId::Bytes(BytesNonFungibleLocalId(v)) => {
                write!(f, "[{}]", hex::encode(&v))
            }
            NonFungibleLocalId::UUID(UUIDNonFungibleLocalId(v)) => {
                let hex = format!("{:032x}", v);
                write!(
                    f,
                    "{{{}-{}-{}-{}-{}}}",
                    &hex[0..8],
                    &hex[8..12],
                    &hex[12..16],
                    &hex[16..20],
                    &hex[20..32]
                )
            }
        }
    }
}

impl fmt::Debug for NonFungibleLocalId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_non_fungible_length_validation() {
        // Bytes length
        let validation_result = NonFungibleLocalId::bytes([0; NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH]);
        assert!(matches!(validation_result, Ok(_)));
        let validation_result =
            NonFungibleLocalId::bytes([0; 1 + NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH]);
        assert_eq!(validation_result, Err(ContentValidationError::TooLong));
        let validation_result = NonFungibleLocalId::bytes(vec![]);
        assert_eq!(validation_result, Err(ContentValidationError::Empty));

        // String length
        let validation_result =
            NonFungibleLocalId::string(string_of_length(NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH));
        assert!(matches!(validation_result, Ok(_)));
        let validation_result =
            NonFungibleLocalId::string(string_of_length(1 + NON_FUNGIBLE_LOCAL_ID_MAX_LENGTH));
        assert_eq!(validation_result, Err(ContentValidationError::TooLong));
        let validation_result = NonFungibleLocalId::string("".to_string());
        assert_eq!(validation_result, Err(ContentValidationError::Empty));

        let validation_result =
            NonFungibleLocalId::from_str("{--------------4----8---------------1}");
        assert_eq!(
            validation_result,
            Err(ParseNonFungibleLocalIdError::InvalidUUID)
        );

        // UUIDv1
        let validation_result =
            NonFungibleLocalId::from_str("{baaa4d3e-97f6-11ed-a8fc-0242ac120002}");
        assert_eq!(
            validation_result,
            Err(ParseNonFungibleLocalIdError::ContentValidationError(
                ContentValidationError::NotUuidV4Variant1
            ))
        );

        // UUIDv4 variant 2
        let validation_result =
            NonFungibleLocalId::from_str("{a5942110-956f-4b51-d517-79366f501d25}");
        assert_eq!(
            validation_result,
            Err(ParseNonFungibleLocalIdError::ContentValidationError(
                ContentValidationError::NotUuidV4Variant1
            ))
        );
    }

    fn string_of_length(size: usize) -> String {
        let mut str_buf = String::new();
        for _ in 0..size {
            str_buf.push('a');
        }
        str_buf
    }

    #[test]
    fn test_non_fungible_string_validation() {
        let valid_id_string = "abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWZYZ_0123456789";
        let validation_result = NonFungibleLocalId::string(valid_id_string.to_owned());
        assert!(matches!(validation_result, Ok(_)));

        test_invalid_char('.');
        test_invalid_char('`');
        test_invalid_char('\\');
        test_invalid_char('"');
        test_invalid_char(' ');
        test_invalid_char('\r');
        test_invalid_char('\n');
        test_invalid_char('\t');
        test_invalid_char('\u{0000}'); // Null
        test_invalid_char('\u{0301}'); // Combining acute accent
        test_invalid_char('\u{2764}'); // ❤
        test_invalid_char('\u{000C}'); // Form feed
        test_invalid_char('\u{202D}'); // LTR override
        test_invalid_char('\u{202E}'); // RTL override
        test_invalid_char('\u{1F600}'); // :-) emoji
    }

    fn test_invalid_char(char: char) {
        let validation_result = NonFungibleLocalId::string(format!("valid_{}", char));
        assert_eq!(
            validation_result,
            Err(ContentValidationError::ContainsBadCharacter(char))
        );
    }

    #[test]
    fn test_from_str() {
        // Integers and invalid integers:
        assert_eq!(
            NonFungibleLocalId::from_str("#1#").unwrap(),
            NonFungibleLocalId::integer(1)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("#10#").unwrap(),
            NonFungibleLocalId::integer(10)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("#0#").unwrap(),
            NonFungibleLocalId::integer(0)
        );
        // Non-canonical, invalid integers
        assert_eq!(
            NonFungibleLocalId::from_str("##"),
            Err(ParseNonFungibleLocalIdError::InvalidInteger)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("#+10#"),
            Err(ParseNonFungibleLocalIdError::InvalidInteger)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("#010#"),
            Err(ParseNonFungibleLocalIdError::InvalidInteger)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("# 10#"),
            Err(ParseNonFungibleLocalIdError::InvalidInteger)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("#000#"),
            Err(ParseNonFungibleLocalIdError::InvalidInteger)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("#-10#"),
            Err(ParseNonFungibleLocalIdError::InvalidInteger)
        );
        assert_eq!(
            NonFungibleLocalId::from_str("{b36f5b3f-835b-406c-980f-7788d8f13c1b}").unwrap(),
            NonFungibleLocalId::uuid(0xb36f5b3f_835b_406c_980f_7788d8f13c1b).unwrap()
        );
        assert_eq!(
            NonFungibleLocalId::from_str("<test>").unwrap(),
            NonFungibleLocalId::string("test").unwrap()
        );
        assert_eq!(
            NonFungibleLocalId::from_str("[010a]").unwrap(),
            NonFungibleLocalId::bytes(vec![1, 10]).unwrap()
        );
    }

    #[test]
    fn test_to_string() {
        assert_eq!(NonFungibleLocalId::integer(0).to_string(), "#0#",);
        assert_eq!(NonFungibleLocalId::integer(1).to_string(), "#1#",);
        assert_eq!(NonFungibleLocalId::integer(10).to_string(), "#10#",);
        assert_eq!(
            NonFungibleLocalId::uuid(0x0236805c_56e9_4431_a2a3_7d339db305c4)
                .unwrap()
                .to_string(),
            "{0236805c-56e9-4431-a2a3-7d339db305c4}",
        );
        assert_eq!(
            NonFungibleLocalId::string("test").unwrap().to_string(),
            "<test>"
        );
        assert_eq!(
            NonFungibleLocalId::bytes(vec![1, 10]).unwrap().to_string(),
            "[010a]"
        );
    }
}
